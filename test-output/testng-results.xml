<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="35" passed="30" failed="5" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-12-31T09:59:20 GST" name="My Extent Report Suite" finished-at="2022-12-31T10:05:51 GST" duration-ms="391237">
    <groups>
      <group name="SmokeTest">
        <method signature="ManageDeliveryBoyTestCases.verifyToolTipTextIsDisplayedCorrectly()[pri:1, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" name="verifyToolTipTextIsDisplayedCorrectly" class="testCases.ManageDeliveryBoyTestCases"/>
        <method signature="MobileSliderTestCases.verifyMobileSliderTitleIsDisplayedCorrectly()[pri:1, instance:testCases.MobileSliderTestCases@3b69e7d1]" name="verifyMobileSliderTitleIsDisplayedCorrectly" class="testCases.MobileSliderTestCases"/>
      </group> <!-- SmokeTest -->
    </groups>
    <test started-at="2022-12-31T09:59:20 GST" name="My Test" finished-at="2022-12-31T10:05:51 GST" duration-ms="391237">
      <class name="testCases.ManageDeliveryBoyTestCases">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:01:28 GST" name="beforeMethod" finished-at="2022-12-31T10:01:31 GST" duration-ms="2376" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyToolTipTextIsDisplayedCorrectly()[pri:1, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:01:31 GST" name="verifyToolTipTextIsDisplayedCorrectly" description="tool tip validation" finished-at="2022-12-31T10:01:35 GST" duration-ms="4537" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyToolTipTextIsDisplayedCorrectly -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:01:35 GST" name="afterMethod" finished-at="2022-12-31T10:01:51 GST" duration-ms="16145" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyToolTipTextIsDisplayedCorrectly status=SUCCESS method=ManageDeliveryBoyTestCases.verifyToolTipTextIsDisplayedCorrectly()[pri:1, instance:testCases.ManageDeliveryBoyTestCases@1165b38] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:01:51 GST" name="beforeMethod" finished-at="2022-12-31T10:01:54 GST" duration-ms="2979" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheStyleOfNewBtn()[pri:2, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:01:54 GST" name="verifyTheStyleOfNewBtn" description="new button styleproperty validation" finished-at="2022-12-31T10:01:59 GST" duration-ms="4543" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheStyleOfNewBtn -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:01:59 GST" name="afterMethod" finished-at="2022-12-31T10:02:01 GST" duration-ms="1858" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheStyleOfNewBtn status=SUCCESS method=ManageDeliveryBoyTestCases.verifyTheStyleOfNewBtn()[pri:2, instance:testCases.ManageDeliveryBoyTestCases@1165b38] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:02:01 GST" name="beforeMethod" finished-at="2022-12-31T10:02:03 GST" duration-ms="2622" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifySearchButtonIsClickable()[pri:3, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:02:03 GST" name="verifySearchButtonIsClickable" description="search button validation" finished-at="2022-12-31T10:02:05 GST" duration-ms="1751" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchButtonIsClickable -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:02:05 GST" name="afterMethod" finished-at="2022-12-31T10:02:21 GST" duration-ms="16168" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySearchButtonIsClickable status=SUCCESS method=ManageDeliveryBoyTestCases.verifySearchButtonIsClickable()[pri:3, instance:testCases.ManageDeliveryBoyTestCases@1165b38] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:02:21 GST" name="beforeMethod" finished-at="2022-12-31T10:02:25 GST" duration-ms="4083" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifySuccessfullRegistrationOfDeliveryBoy()[pri:4, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:02:25 GST" name="verifySuccessfullRegistrationOfDeliveryBoy" description="successfull registration of delivery boy" finished-at="2022-12-31T10:02:29 GST" duration-ms="3399" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySuccessfullRegistrationOfDeliveryBoy -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:02:29 GST" name="afterMethod" finished-at="2022-12-31T10:02:29 GST" duration-ms="100" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySuccessfullRegistrationOfDeliveryBoy status=SUCCESS method=ManageDeliveryBoyTestCases.verifySuccessfullRegistrationOfDeliveryBoy()[pri:4, instance:testCases.ManageDeliveryBoyTestCases@1165b38] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:02:29 GST" name="beforeMethod" finished-at="2022-12-31T10:02:31 GST" duration-ms="2042" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifySuccessfullDeletionOfDeliveryBoy()[pri:5, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:02:31 GST" name="verifySuccessfullDeletionOfDeliveryBoy" description="successfull deletion of delivery boy" finished-at="2022-12-31T10:02:33 GST" duration-ms="2697" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySuccessfullDeletionOfDeliveryBoy -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageDeliveryBoyTestCases@1165b38]" started-at="2022-12-31T10:02:33 GST" name="afterMethod" finished-at="2022-12-31T10:02:50 GST" duration-ms="16183" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySuccessfullDeletionOfDeliveryBoy status=SUCCESS method=ManageDeliveryBoyTestCases.verifySuccessfullDeletionOfDeliveryBoy()[pri:5, instance:testCases.ManageDeliveryBoyTestCases@1165b38] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testCases.ManageDeliveryBoyTestCases -->
      <class name="testCases.MobileSliderTestCases">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.MobileSliderTestCases@3b69e7d1]" started-at="2022-12-31T10:04:15 GST" name="beforeMethod" finished-at="2022-12-31T10:04:18 GST" duration-ms="2488" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyMobileSliderTitleIsDisplayedCorrectly()[pri:1, instance:testCases.MobileSliderTestCases@3b69e7d1]" started-at="2022-12-31T10:04:18 GST" name="verifyMobileSliderTitleIsDisplayedCorrectly" description="Mobile Slider validation" finished-at="2022-12-31T10:04:20 GST" duration-ms="1965" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyMobileSliderTitleIsDisplayedCorrectly -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.MobileSliderTestCases@3b69e7d1]" started-at="2022-12-31T10:04:20 GST" name="afterMethod" finished-at="2022-12-31T10:04:20 GST" duration-ms="89" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyMobileSliderTitleIsDisplayedCorrectly status=SUCCESS method=MobileSliderTestCases.verifyMobileSliderTitleIsDisplayedCorrectly()[pri:1, instance:testCases.MobileSliderTestCases@3b69e7d1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.MobileSliderTestCases@3b69e7d1]" started-at="2022-12-31T10:04:20 GST" name="beforeMethod" finished-at="2022-12-31T10:04:22 GST" duration-ms="2188" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheImageIsDisplayed()[pri:2, instance:testCases.MobileSliderTestCases@3b69e7d1]" started-at="2022-12-31T10:04:22 GST" name="verifyTheImageIsDisplayed" description="image displayed" finished-at="2022-12-31T10:04:24 GST" duration-ms="2078" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheImageIsDisplayed -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.MobileSliderTestCases@3b69e7d1]" started-at="2022-12-31T10:04:24 GST" name="afterMethod" finished-at="2022-12-31T10:04:40 GST" duration-ms="16170" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheImageIsDisplayed status=SUCCESS method=MobileSliderTestCases.verifyTheImageIsDisplayed()[pri:2, instance:testCases.MobileSliderTestCases@3b69e7d1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.MobileSliderTestCases@3b69e7d1]" started-at="2022-12-31T10:04:40 GST" name="beforeMethod" finished-at="2022-12-31T10:04:42 GST" duration-ms="2069" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheStatusOfItem()[pri:3, instance:testCases.MobileSliderTestCases@3b69e7d1]" started-at="2022-12-31T10:04:42 GST" name="verifyTheStatusOfItem" description="check the status of item" finished-at="2022-12-31T10:04:44 GST" duration-ms="1958" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheStatusOfItem -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.MobileSliderTestCases@3b69e7d1]" started-at="2022-12-31T10:04:44 GST" name="afterMethod" finished-at="2022-12-31T10:04:57 GST" duration-ms="12147" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheStatusOfItem status=SUCCESS method=MobileSliderTestCases.verifyTheStatusOfItem()[pri:3, instance:testCases.MobileSliderTestCases@3b69e7d1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testCases.MobileSliderTestCases -->
      <class name="testCases.LoginTestCase">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:20 GST" name="beforeMethod" finished-at="2022-12-31T09:59:24 GST" duration-ms="3509" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="excelReadLogin()[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:24 GST" name="excelReadLogin" finished-at="2022-12-31T09:59:25 GST" duration-ms="1004" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- excelReadLogin -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:25 GST" name="afterMethod" finished-at="2022-12-31T09:59:25 GST" duration-ms="167" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=excelReadLogin status=SUCCESS method=LoginTestCase.excelReadLogin()[pri:0, instance:testCases.LoginTestCase@30c15d8b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:25 GST" name="beforeMethod" finished-at="2022-12-31T09:59:27 GST" duration-ms="2250" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="profileNameStyleValidation()[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:27 GST" name="profileNameStyleValidation" finished-at="2022-12-31T09:59:28 GST" duration-ms="947" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- profileNameStyleValidation -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:28 GST" name="afterMethod" finished-at="2022-12-31T09:59:28 GST" duration-ms="83" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=profileNameStyleValidation status=SUCCESS method=LoginTestCase.profileNameStyleValidation()[pri:0, instance:testCases.LoginTestCase@30c15d8b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:28 GST" name="beforeMethod" finished-at="2022-12-31T09:59:31 GST" duration-ms="2113" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoggedUsers()[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:31 GST" name="verifyLoggedUsers" finished-at="2022-12-31T09:59:31 GST" duration-ms="850" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoggedUsers -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:31 GST" name="afterMethod" finished-at="2022-12-31T09:59:32 GST" duration-ms="123" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoggedUsers status=SUCCESS method=LoginTestCase.verifyLoggedUsers()[pri:0, instance:testCases.LoginTestCase@30c15d8b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:32 GST" name="beforeMethod" finished-at="2022-12-31T09:59:35 GST" duration-ms="3294" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoggedUsersWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:35 GST" name="verifyLoggedUsersWithDataProvider" description="Login using dataprovider" data-provider="data" finished-at="2022-12-31T09:59:36 GST" duration-ms="1165" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoggedUsersWithDataProvider -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:36 GST" name="afterMethod" finished-at="2022-12-31T09:59:36 GST" duration-ms="77" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoggedUsersWithDataProvider status=SUCCESS method=LoginTestCase.verifyLoggedUsersWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:36 GST" name="beforeMethod" finished-at="2022-12-31T09:59:38 GST" duration-ms="2192" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoggedUsersWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:38 GST" name="verifyLoggedUsersWithDataProvider" description="Login using dataprovider" data-provider="data" finished-at="2022-12-31T09:59:49 GST" duration-ms="10514" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[admin54]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//a[@data-toggle='dropdown']"}
  (Session info: chrome=108.0.5359.125)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.4.0', revision: 'e5c75ed026a'
System info: host: 'DESKTOP-J2S3UT7', ip: '192.168.1.15', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '18.0.2.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [aa1a8713e3c566cf890ee7661dacff2f, findElement {using=xpath, value=//a[@data-toggle='dropdown']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 108.0.5359.125, chrome: {chromedriverVersion: 108.0.5359.71 (1e0e3868ee06..., userDataDir: C:\Users\user\AppData\Local...}, goog:chromeOptions: {debuggerAddress: localhost:58737}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:58737/devtoo..., se:cdpVersion: 108.0.5359.125, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: aa1a8713e3c566cf890ee7661dacff2f]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//a[@data-toggle='dropdown']"}
  (Session info: chrome=108.0.5359.125)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.4.0', revision: 'e5c75ed026a'
System info: host: 'DESKTOP-J2S3UT7', ip: '192.168.1.15', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '18.0.2.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [aa1a8713e3c566cf890ee7661dacff2f, findElement {using=xpath, value=//a[@data-toggle='dropdown']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 108.0.5359.125, chrome: {chromedriverVersion: 108.0.5359.71 (1e0e3868ee06..., userDataDir: C:\Users\user\AppData\Local...}, goog:chromeOptions: {debuggerAddress: localhost:58737}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:58737/devtoo..., se:cdpVersion: 108.0.5359.125, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: aa1a8713e3c566cf890ee7661dacff2f
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:483)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:53)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:184)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:167)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:142)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:547)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:162)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:60)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:365)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:357)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:70)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:39)
at jdk.proxy2/jdk.proxy2.$Proxy19.getText(Unknown Source)
at utilities.GeneralUtilities.getElementText(GeneralUtilities.java:17)
at elementRepository.LoginPage.profileVerification(LoginPage.java:60)
at testCases.LoginTestCase.verifyLoggedUsersWithDataProvider(LoginTestCase.java:54)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:962)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:806)
at org.testng.TestRunner.run(TestRunner.java:601)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:433)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:427)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:387)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoggedUsersWithDataProvider -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T09:59:49 GST" name="afterMethod" finished-at="2022-12-31T10:00:05 GST" duration-ms="16291" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoggedUsersWithDataProvider status=FAILURE method=LoginTestCase.verifyLoggedUsersWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T10:00:05 GST" name="beforeMethod" finished-at="2022-12-31T10:00:07 GST" duration-ms="2062" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoggedUsersWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T10:00:07 GST" name="verifyLoggedUsersWithDataProvider" description="Login using dataprovider" data-provider="data" finished-at="2022-12-31T10:00:18 GST" duration-ms="10596" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[admin4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[admin4]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//a[@data-toggle='dropdown']"}
  (Session info: chrome=108.0.5359.125)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.4.0', revision: 'e5c75ed026a'
System info: host: 'DESKTOP-J2S3UT7', ip: '192.168.1.15', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '18.0.2.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [50c559d57f1c1f94f6e7bae64c1b2f64, findElement {using=xpath, value=//a[@data-toggle='dropdown']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 108.0.5359.125, chrome: {chromedriverVersion: 108.0.5359.71 (1e0e3868ee06..., userDataDir: C:\Users\user\AppData\Local...}, goog:chromeOptions: {debuggerAddress: localhost:58768}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:58768/devtoo..., se:cdpVersion: 108.0.5359.125, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 50c559d57f1c1f94f6e7bae64c1b2f64]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//a[@data-toggle='dropdown']"}
  (Session info: chrome=108.0.5359.125)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.4.0', revision: 'e5c75ed026a'
System info: host: 'DESKTOP-J2S3UT7', ip: '192.168.1.15', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '18.0.2.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [50c559d57f1c1f94f6e7bae64c1b2f64, findElement {using=xpath, value=//a[@data-toggle='dropdown']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 108.0.5359.125, chrome: {chromedriverVersion: 108.0.5359.71 (1e0e3868ee06..., userDataDir: C:\Users\user\AppData\Local...}, goog:chromeOptions: {debuggerAddress: localhost:58768}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:58768/devtoo..., se:cdpVersion: 108.0.5359.125, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 50c559d57f1c1f94f6e7bae64c1b2f64
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:483)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:53)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:184)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:167)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:142)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:547)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:162)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:60)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:365)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:357)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:70)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:39)
at jdk.proxy2/jdk.proxy2.$Proxy19.getText(Unknown Source)
at utilities.GeneralUtilities.getElementText(GeneralUtilities.java:17)
at elementRepository.LoginPage.profileVerification(LoginPage.java:60)
at testCases.LoginTestCase.verifyLoggedUsersWithDataProvider(LoginTestCase.java:54)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:962)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:806)
at org.testng.TestRunner.run(TestRunner.java:601)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:433)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:427)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:387)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoggedUsersWithDataProvider -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T10:00:18 GST" name="afterMethod" finished-at="2022-12-31T10:00:18 GST" duration-ms="194" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoggedUsersWithDataProvider status=FAILURE method=LoginTestCase.verifyLoggedUsersWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T10:00:18 GST" name="beforeMethod" finished-at="2022-12-31T10:00:20 GST" duration-ms="2008" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyLoggedUsersWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T10:00:20 GST" name="verifyLoggedUsersWithDataProvider" description="Login using dataprovider" data-provider="data" finished-at="2022-12-31T10:00:30 GST" duration-ms="10467" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[admin2]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//a[@data-toggle='dropdown']"}
  (Session info: chrome=108.0.5359.125)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.4.0', revision: 'e5c75ed026a'
System info: host: 'DESKTOP-J2S3UT7', ip: '192.168.1.15', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '18.0.2.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [490bc95c4c51a1b3f15e8884bce30ba1, findElement {using=xpath, value=//a[@data-toggle='dropdown']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 108.0.5359.125, chrome: {chromedriverVersion: 108.0.5359.71 (1e0e3868ee06..., userDataDir: C:\Users\user\AppData\Local...}, goog:chromeOptions: {debuggerAddress: localhost:58788}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:58788/devtoo..., se:cdpVersion: 108.0.5359.125, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 490bc95c4c51a1b3f15e8884bce30ba1]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//a[@data-toggle='dropdown']"}
  (Session info: chrome=108.0.5359.125)
For documentation on this error, please visit: https://selenium.dev/exceptions/#no_such_element
Build info: version: '4.4.0', revision: 'e5c75ed026a'
System info: host: 'DESKTOP-J2S3UT7', ip: '192.168.1.15', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '18.0.2.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [490bc95c4c51a1b3f15e8884bce30ba1, findElement {using=xpath, value=//a[@data-toggle='dropdown']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 108.0.5359.125, chrome: {chromedriverVersion: 108.0.5359.71 (1e0e3868ee06..., userDataDir: C:\Users\user\AppData\Local...}, goog:chromeOptions: {debuggerAddress: localhost:58788}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:58788/devtoo..., se:cdpVersion: 108.0.5359.125, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 490bc95c4c51a1b3f15e8884bce30ba1
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:483)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:53)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:184)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:167)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:142)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:547)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:162)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:60)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:365)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:357)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:70)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:39)
at jdk.proxy2/jdk.proxy2.$Proxy19.getText(Unknown Source)
at utilities.GeneralUtilities.getElementText(GeneralUtilities.java:17)
at elementRepository.LoginPage.profileVerification(LoginPage.java:60)
at testCases.LoginTestCase.verifyLoggedUsersWithDataProvider(LoginTestCase.java:54)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:962)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:806)
at org.testng.TestRunner.run(TestRunner.java:601)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:433)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:427)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:387)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoggedUsersWithDataProvider -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T10:00:30 GST" name="afterMethod" finished-at="2022-12-31T10:00:31 GST" duration-ms="204" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyLoggedUsersWithDataProvider status=FAILURE method=LoginTestCase.verifyLoggedUsersWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T10:00:31 GST" name="beforeMethod" finished-at="2022-12-31T10:00:33 GST" duration-ms="2135" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyRememberMeCheckBoxIsSelected()[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T10:00:33 GST" name="verifyRememberMeCheckBoxIsSelected" description="Remember Me checkbox Validation" finished-at="2022-12-31T10:00:33 GST" duration-ms="204" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRememberMeCheckBoxIsSelected -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.LoginTestCase@30c15d8b]" started-at="2022-12-31T10:00:33 GST" name="afterMethod" finished-at="2022-12-31T10:00:49 GST" duration-ms="16174" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRememberMeCheckBoxIsSelected status=SUCCESS method=LoginTestCase.verifyRememberMeCheckBoxIsSelected()[pri:0, instance:testCases.LoginTestCase@30c15d8b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testCases.LoginTestCase -->
      <class name="testCases.ManageProductTestCases">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:03:14 GST" name="beforeMethod" finished-at="2022-12-31T10:03:17 GST" duration-ms="2436" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheImageFileIsSelected()[pri:1, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:03:17 GST" name="verifyTheImageFileIsSelected" description="verify image file is choosen" finished-at="2022-12-31T10:03:25 GST" duration-ms="8433" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheImageFileIsSelected -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:03:25 GST" name="afterMethod" finished-at="2022-12-31T10:03:26 GST" duration-ms="831" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheImageFileIsSelected status=SUCCESS method=ManageProductTestCases.verifyTheImageFileIsSelected()[pri:1, instance:testCases.ManageProductTestCases@7586beff] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:03:26 GST" name="beforeMethod" finished-at="2022-12-31T10:03:28 GST" duration-ms="2121" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheVegRadioButtonIsSelected()[pri:2, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:03:28 GST" name="verifyTheVegRadioButtonIsSelected" description="verify veg radio button is selected" finished-at="2022-12-31T10:03:32 GST" duration-ms="3657" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheVegRadioButtonIsSelected -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:03:32 GST" name="afterMethod" finished-at="2022-12-31T10:03:48 GST" duration-ms="16142" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheVegRadioButtonIsSelected status=SUCCESS method=ManageProductTestCases.verifyTheVegRadioButtonIsSelected()[pri:2, instance:testCases.ManageProductTestCases@7586beff] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:03:48 GST" name="beforeMethod" finished-at="2022-12-31T10:03:50 GST" duration-ms="2049" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheStockRadioBtnIsSelected()[pri:3, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:03:50 GST" name="verifyTheStockRadioBtnIsSelected" description="verify Stock yes radio button is selected" finished-at="2022-12-31T10:03:54 GST" duration-ms="3503" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheStockRadioBtnIsSelected -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:03:54 GST" name="afterMethod" finished-at="2022-12-31T10:04:10 GST" duration-ms="16165" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheStockRadioBtnIsSelected status=SUCCESS method=ManageProductTestCases.verifyTheStockRadioBtnIsSelected()[pri:3, instance:testCases.ManageProductTestCases@7586beff] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:04:10 GST" name="beforeMethod" finished-at="2022-12-31T10:04:12 GST" duration-ms="2163" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheColorOfStyleBtn()[pri:4, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:04:12 GST" name="verifyTheColorOfStyleBtn" description="Style validation of Save button" finished-at="2022-12-31T10:04:15 GST" duration-ms="3458" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheColorOfStyleBtn -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageProductTestCases@7586beff]" started-at="2022-12-31T10:04:15 GST" name="afterMethod" finished-at="2022-12-31T10:04:15 GST" duration-ms="91" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheColorOfStyleBtn status=SUCCESS method=ManageProductTestCases.verifyTheColorOfStyleBtn()[pri:4, instance:testCases.ManageProductTestCases@7586beff] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testCases.ManageProductTestCases -->
      <class name="testCases.PushNotificationsTestCases">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:04:57 GST" name="beforeMethod" finished-at="2022-12-31T10:04:59 GST" duration-ms="2419" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyPushNotificationTitleDisplayedCorrectly()[pri:1, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:04:59 GST" name="verifyPushNotificationTitleDisplayedCorrectly" description="page title verification" finished-at="2022-12-31T10:05:00 GST" duration-ms="1412" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPushNotificationTitleDisplayedCorrectly -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:00 GST" name="afterMethod" finished-at="2022-12-31T10:05:01 GST" duration-ms="98" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPushNotificationTitleDisplayedCorrectly status=SUCCESS method=PushNotificationsTestCases.verifyPushNotificationTitleDisplayedCorrectly()[pri:1, instance:testCases.PushNotificationsTestCases@815b41f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:01 GST" name="beforeMethod" finished-at="2022-12-31T10:05:03 GST" duration-ms="2058" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTitleTextBoxHasMandatorySymbol()[pri:2, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:03 GST" name="verifyTitleTextBoxHasMandatorySymbol" description="Title text box is mandatory" finished-at="2022-12-31T10:05:04 GST" duration-ms="1745" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTitleTextBoxHasMandatorySymbol -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:04 GST" name="afterMethod" finished-at="2022-12-31T10:05:04 GST" duration-ms="89" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTitleTextBoxHasMandatorySymbol status=SUCCESS method=PushNotificationsTestCases.verifyTitleTextBoxHasMandatorySymbol()[pri:2, instance:testCases.PushNotificationsTestCases@815b41f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:04 GST" name="beforeMethod" finished-at="2022-12-31T10:05:07 GST" duration-ms="2480" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyColorOfSendBtn()[pri:3, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:07 GST" name="verifyColorOfSendBtn" description="Send Button Color Validation" finished-at="2022-12-31T10:05:08 GST" duration-ms="1511" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyColorOfSendBtn -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:08 GST" name="afterMethod" finished-at="2022-12-31T10:05:08 GST" duration-ms="97" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyColorOfSendBtn status=SUCCESS method=PushNotificationsTestCases.verifyColorOfSendBtn()[pri:3, instance:testCases.PushNotificationsTestCases@815b41f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:08 GST" name="beforeMethod" finished-at="2022-12-31T10:05:11 GST" duration-ms="2017" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyBackGroundColorOfAlertBox()[pri:4, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:11 GST" name="verifyBackGroundColorOfAlertBox" description="Background color verification of alert box" finished-at="2022-12-31T10:05:14 GST" duration-ms="3072" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyBackGroundColorOfAlertBox -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:14 GST" name="afterMethod" finished-at="2022-12-31T10:05:14 GST" duration-ms="88" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyBackGroundColorOfAlertBox status=SUCCESS method=PushNotificationsTestCases.verifyBackGroundColorOfAlertBox()[pri:4, instance:testCases.PushNotificationsTestCases@815b41f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:14 GST" name="beforeMethod" finished-at="2022-12-31T10:05:16 GST" duration-ms="2424" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheAlertMessageDisplayed()[pri:5, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:16 GST" name="verifyTheAlertMessageDisplayed" description="alert message verification" finished-at="2022-12-31T10:05:19 GST" duration-ms="2926" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheAlertMessageDisplayed -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.PushNotificationsTestCases@815b41f]" started-at="2022-12-31T10:05:19 GST" name="afterMethod" finished-at="2022-12-31T10:05:19 GST" duration-ms="78" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheAlertMessageDisplayed status=SUCCESS method=PushNotificationsTestCases.verifyTheAlertMessageDisplayed()[pri:5, instance:testCases.PushNotificationsTestCases@815b41f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testCases.PushNotificationsTestCases -->
      <class name="testCases.ManageLocationTestCases">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageLocationTestCases@5b12b668]" started-at="2022-12-31T10:01:02 GST" name="beforeMethod" finished-at="2022-12-31T10:01:04 GST" duration-ms="1953" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheNumberOfActiveStatus()[pri:1, instance:testCases.ManageLocationTestCases@5b12b668]" started-at="2022-12-31T10:01:04 GST" name="verifyTheNumberOfActiveStatus" description="Validating count of &#039;Active&#039; status" finished-at="2022-12-31T10:01:06 GST" duration-ms="1942" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Count is not as expected expected [15] but found [14]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Count is not as expected expected [15] but found [14]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertEqualsImpl(Assert.java:149)
at org.testng.Assert.assertEquals(Assert.java:131)
at org.testng.Assert.assertEquals(Assert.java:1240)
at testCases.ManageLocationTestCases.verifyTheNumberOfActiveStatus(ManageLocationTestCases.java:22)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:962)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:806)
at org.testng.TestRunner.run(TestRunner.java:601)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:433)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:427)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:387)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheNumberOfActiveStatus -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageLocationTestCases@5b12b668]" started-at="2022-12-31T10:01:06 GST" name="afterMethod" finished-at="2022-12-31T10:01:23 GST" duration-ms="16281" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheNumberOfActiveStatus status=FAILURE method=ManageLocationTestCases.verifyTheNumberOfActiveStatus()[pri:1, instance:testCases.ManageLocationTestCases@5b12b668] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageLocationTestCases@5b12b668]" started-at="2022-12-31T10:01:23 GST" name="beforeMethod" finished-at="2022-12-31T10:01:25 GST" duration-ms="2573" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheSelectedState()[pri:2, instance:testCases.ManageLocationTestCases@5b12b668]" started-at="2022-12-31T10:01:25 GST" name="verifyTheSelectedState" description="edit location and validate selected state" finished-at="2022-12-31T10:01:28 GST" duration-ms="2954" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheSelectedState -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageLocationTestCases@5b12b668]" started-at="2022-12-31T10:01:28 GST" name="afterMethod" finished-at="2022-12-31T10:01:28 GST" duration-ms="87" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheSelectedState status=SUCCESS method=ManageLocationTestCases.verifyTheSelectedState()[pri:2, instance:testCases.ManageLocationTestCases@5b12b668] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testCases.ManageLocationTestCases -->
      <class name="testCases.AdminUsersTestCases">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.AdminUsersTestCases@5542c4ed]" started-at="2022-12-31T10:05:19 GST" name="beforeMethod" finished-at="2022-12-31T10:05:21 GST" duration-ms="1987" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="validateAdminProfileWithFaker()[pri:1, instance:testCases.AdminUsersTestCases@5542c4ed]" started-at="2022-12-31T10:05:21 GST" name="validateAdminProfileWithFaker" description="validating a user profile already exists while using faker class" finished-at="2022-12-31T10:05:27 GST" duration-ms="6025" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateAdminProfileWithFaker -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.AdminUsersTestCases@5542c4ed]" started-at="2022-12-31T10:05:27 GST" name="afterMethod" finished-at="2022-12-31T10:05:27 GST" duration-ms="350" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validateAdminProfileWithFaker status=SUCCESS method=AdminUsersTestCases.validateAdminProfileWithFaker()[pri:1, instance:testCases.AdminUsersTestCases@5542c4ed] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.AdminUsersTestCases@5542c4ed]" started-at="2022-12-31T10:05:27 GST" name="beforeMethod" finished-at="2022-12-31T10:05:31 GST" duration-ms="3766" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="validateAdminProfileAlreadyExists()[pri:2, instance:testCases.AdminUsersTestCases@5542c4ed]" started-at="2022-12-31T10:05:31 GST" name="validateAdminProfileAlreadyExists" description="validating a user profile already exists" finished-at="2022-12-31T10:05:35 GST" duration-ms="3957" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateAdminProfileAlreadyExists -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.AdminUsersTestCases@5542c4ed]" started-at="2022-12-31T10:05:35 GST" name="afterMethod" finished-at="2022-12-31T10:05:51 GST" duration-ms="16136" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validateAdminProfileAlreadyExists status=SUCCESS method=AdminUsersTestCases.validateAdminProfileAlreadyExists()[pri:2, instance:testCases.AdminUsersTestCases@5542c4ed] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testCases.AdminUsersTestCases -->
      <class name="testCases.DashboardTestCase">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.DashboardTestCase@327514f]" started-at="2022-12-31T10:00:49 GST" name="beforeMethod" finished-at="2022-12-31T10:00:53 GST" duration-ms="4140" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="homeTabStyleValidation()[pri:0, instance:testCases.DashboardTestCase@327514f]" started-at="2022-12-31T10:00:53 GST" name="homeTabStyleValidation" finished-at="2022-12-31T10:00:55 GST" duration-ms="1226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- homeTabStyleValidation -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.DashboardTestCase@327514f]" started-at="2022-12-31T10:00:55 GST" name="afterMethod" finished-at="2022-12-31T10:00:55 GST" duration-ms="102" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=homeTabStyleValidation status=SUCCESS method=DashboardTestCase.homeTabStyleValidation()[pri:0, instance:testCases.DashboardTestCase@327514f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.DashboardTestCase@327514f]" started-at="2022-12-31T10:00:55 GST" name="beforeMethod" finished-at="2022-12-31T10:00:57 GST" duration-ms="2822" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyManageExpenseIsDisplayedCorrectly()[pri:0, instance:testCases.DashboardTestCase@327514f]" started-at="2022-12-31T10:00:57 GST" name="verifyManageExpenseIsDisplayedCorrectly" finished-at="2022-12-31T10:00:58 GST" duration-ms="900" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyManageExpenseIsDisplayedCorrectly -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.DashboardTestCase@327514f]" started-at="2022-12-31T10:00:58 GST" name="afterMethod" finished-at="2022-12-31T10:00:59 GST" duration-ms="146" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyManageExpenseIsDisplayedCorrectly status=SUCCESS method=DashboardTestCase.verifyManageExpenseIsDisplayedCorrectly()[pri:0, instance:testCases.DashboardTestCase@327514f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.DashboardTestCase@327514f]" started-at="2022-12-31T10:00:59 GST" name="beforeMethod" finished-at="2022-12-31T10:01:01 GST" duration-ms="2609" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyManageUsersIsDisplayedCorrectly()[pri:0, instance:testCases.DashboardTestCase@327514f]" started-at="2022-12-31T10:01:01 GST" name="verifyManageUsersIsDisplayedCorrectly" finished-at="2022-12-31T10:01:02 GST" duration-ms="920" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyManageUsersIsDisplayedCorrectly -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.DashboardTestCase@327514f]" started-at="2022-12-31T10:01:02 GST" name="afterMethod" finished-at="2022-12-31T10:01:02 GST" duration-ms="298" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyManageUsersIsDisplayedCorrectly status=SUCCESS method=DashboardTestCase.verifyManageUsersIsDisplayedCorrectly()[pri:0, instance:testCases.DashboardTestCase@327514f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testCases.DashboardTestCase -->
      <class name="testCases.ManageOrdersTestCases">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageOrdersTestCases@4c12331b]" started-at="2022-12-31T10:02:50 GST" name="beforeMethod" finished-at="2022-12-31T10:02:52 GST" duration-ms="2081" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyThevaluesOfColumnpaymentModeIsBank()[pri:1, instance:testCases.ManageOrdersTestCases@4c12331b]" started-at="2022-12-31T10:02:52 GST" name="verifyThevaluesOfColumnpaymentModeIsBank" description="verify value of column payment mode" finished-at="2022-12-31T10:03:05 GST" duration-ms="13175" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyThevaluesOfColumnpaymentModeIsBank -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageOrdersTestCases@4c12331b]" started-at="2022-12-31T10:03:05 GST" name="afterMethod" finished-at="2022-12-31T10:03:05 GST" duration-ms="108" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyThevaluesOfColumnpaymentModeIsBank status=SUCCESS method=ManageOrdersTestCases.verifyThevaluesOfColumnpaymentModeIsBank()[pri:1, instance:testCases.ManageOrdersTestCases@4c12331b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageOrdersTestCases@4c12331b]" started-at="2022-12-31T10:03:05 GST" name="beforeMethod" finished-at="2022-12-31T10:03:07 GST" duration-ms="1996" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyTheSizeOfStatusDropdown()[pri:2, instance:testCases.ManageOrdersTestCases@4c12331b]" started-at="2022-12-31T10:03:07 GST" name="verifyTheSizeOfStatusDropdown" description="status drop down size" finished-at="2022-12-31T10:03:09 GST" duration-ms="2312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTheSizeOfStatusDropdown -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageOrdersTestCases@4c12331b]" started-at="2022-12-31T10:03:09 GST" name="afterMethod" finished-at="2022-12-31T10:03:09 GST" duration-ms="85" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTheSizeOfStatusDropdown status=SUCCESS method=ManageOrdersTestCases.verifyTheSizeOfStatusDropdown()[pri:2, instance:testCases.ManageOrdersTestCases@4c12331b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:testCases.ManageOrdersTestCases@4c12331b]" started-at="2022-12-31T10:03:09 GST" name="beforeMethod" finished-at="2022-12-31T10:03:12 GST" duration-ms="2389" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="verifyOrderIdAndModeOfPayment()[pri:3, instance:testCases.ManageOrdersTestCases@4c12331b]" started-at="2022-12-31T10:03:12 GST" name="verifyOrderIdAndModeOfPayment" description="search with orderid and validate orderid and paymnt mode" finished-at="2022-12-31T10:03:14 GST" duration-ms="2308" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
Order Id is not as expected expected [363] but found [352],
Text Error expected [COD] but found [Bank]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
Order Id is not as expected expected [363] but found [352],
Text Error expected [COD] but found [Bank]
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:46)
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:30)
at testCases.ManageOrdersTestCases.verifyOrderIdAndModeOfPayment(ManageOrdersTestCases.java:49)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:962)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:806)
at org.testng.TestRunner.run(TestRunner.java:601)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:433)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:427)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:387)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyOrderIdAndModeOfPayment -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testCases.ManageOrdersTestCases@4c12331b]" started-at="2022-12-31T10:03:14 GST" name="afterMethod" finished-at="2022-12-31T10:03:14 GST" duration-ms="239" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyOrderIdAndModeOfPayment status=FAILURE method=ManageOrdersTestCases.verifyOrderIdAndModeOfPayment()[pri:3, instance:testCases.ManageOrdersTestCases@4c12331b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testCases.ManageOrdersTestCases -->
    </test> <!-- My Test -->
  </suite> <!-- My Extent Report Suite -->
</testng-results>
